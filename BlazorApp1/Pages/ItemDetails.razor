@page "/itemdetails"
@page "/itemdetails/{id}"

@using BlazorApp1.Entities.Request
@using BlazorApp1.ServiceInterfaces.Internal
@using BlazorApp1.DTOs
@using Newtonsoft.Json

@if(string.IsNullOrEmpty(Id))
{
    <h1>Add New Item</h1>
}
else
{
    <h1>Update Item</h1>
}

<div class="row">
    <EditForm Model="@modelVms" OnValidSubmit="@HandleValidRequest" OnInvalidSubmit="@HandleFailedRequest"> 
        <div class="form-group">
            <label class="col-md-3">Name</label>
            <InputText class="col-md-8 form-control" @bind-Value="@modelVms.ItemName"></InputText>
        </div>
        <br />
        <div class="form-group">
            <button type="submit" class="btn btn-warning">Save</button>
            <a @onclick="@GoToItems" class="btn btn-primary">Back</a>
            @if(!string.IsNullOrEmpty(Id))
            {
                <a @onclick="@DeleteItem" class="btn btn-danger">Delete</a>
            }

        </div>

    </EditForm>
</div>

@code {


    protected string Message = string.Empty;
    protected ItemRequest modelVms { get; set; } = new ItemRequest();

    [Parameter]
    public string Id { get; set; }

    [Inject]
    private IDataService _dataService { get; set; }

    [Inject]
    private IToastService _toastr { get; set; }

    [Inject]
    private NavigationManager navigationManager { get; set; }


    protected async override Task OnInitializedAsync()
    {
        var message = "";

        if(string.IsNullOrEmpty(Id))
        {
            // adding a new item
        }
        else
        {
            //update new item
            var itemId = Convert.ToInt32(Id);
            var apiResponse = await _dataService.StockItems.Get(itemId);

            if (apiResponse != null)
            {
                if (apiResponse.StatusCode == 200)
                {
                    modelVms = apiResponse.Data != null ?
                    JsonConvert.DeserializeObject<ItemRequest>(apiResponse.Data.ToString()) : null;
                    message = $"Message: {apiResponse.Message}<br/>Description: {apiResponse.Description}";
                }
                else
                {
                    message = $"Title: {apiResponse.Title}<br/>Description: {apiResponse.Description}";

                }
                Message = message;
            }
        }

    }

    protected void HandleFailedRequest()
    {
        Message = "";
    }

    protected async void HandleValidRequest()
    {
        string message = "Could not get response from API";


        if (string.IsNullOrEmpty(Id))
        {
            modelVms.CreatedOn = DateTime.Now;

            var apiResponse = await _dataService.StockItems.Create(modelVms);
            if (apiResponse != null)
            {
                if (apiResponse.StatusCode == 200)
                {
                    var createdDto = apiResponse.Data != null ? 
                    JsonConvert.DeserializeObject<ItemRequest>(apiResponse.Data.ToString()) : null;
                    //navigationManager.NavigateTo("/items");
                    message = $"Message: {apiResponse.Message}<br/>Description: {apiResponse.Description}";
                    _toastr.ShowSuccess(message);

                }
                else
                {
                    message = $"Title: {apiResponse.Title}<br/>Description: {apiResponse.Message}";
                    // _toastr.ShowWarning(message);

                }
            }
            else
            {
                message = $"Title: {apiResponse.Title}<br/>Description: {apiResponse.Message}";
                // _toastr.ShowError(message);

            }

        }
        else
        {
            int itemId = Convert.ToInt32(Id);
            modelVms.Id = itemId;
            modelVms.CreatedOn = DateTime.Now;

            var apiResponse = await _dataService.StockItems.Update(itemId, modelVms);

            if (apiResponse != null)
            {
                if (apiResponse.StatusCode == 200)
                {
                    var createdDto = apiResponse.Data != null ?
                    JsonConvert.DeserializeObject<ItemRequest>(apiResponse.Data.ToString()) : null;
                    navigationManager.NavigateTo("/items");
                    message = $"Message: {apiResponse.Message}<br/>Description: {apiResponse.Description}";
                    _toastr.ShowSuccess(message);

                }
                else
                {
                    message = $"Title: {apiResponse.Title}<br/>Description: {apiResponse.Message}";
                    // _toastr.ShowWarning(message);

                }
            }
            else
            {
                message = $"Title: {apiResponse.Title}<br/>Description: {apiResponse.Message}";
                // _toastr.ShowError(message);

            }
            Message = message;
        }
    }

    protected async Task DeleteItem()
    {
            var message = "Cound not get respinse from API";
            var itemId = Convert.ToInt32(Id);
            var apiResponse = await _dataService.StockItems.Delete(itemId);

            if (apiResponse != null)
            {
                if (apiResponse.StatusCode == 200)
                {
                    var rowsAffected = apiResponse.Data != null ?
                    Convert.ToInt32(apiResponse.Data.ToString()) : -1;
                    message = $"Message: {apiResponse.Message}<br/>Description: {apiResponse.Description}";
                    navigationManager.NavigateTo("/items");
                }
                else
                {
                    message = $"Title: {apiResponse.Title}<br/>Description: {apiResponse.Description}";
                }
            }
            else
            {
                message = $"Message: {apiResponse.Message}<br/>Description: {apiResponse.Description}";
            }
            Message = message;

    }

    protected void GoToItems()
    {
        navigationManager.NavigateTo("/items");
    }
}
